
/*
8 Implement Cohen Suterland Line clipping method to clip the line with respect the
viewport and window. Use mouse click, keyboard interface
*/

#include <iostream>
#include <GL/glut.h>
#include <cmath>
using namespace std;

// Window boundaries
int xl = 50, xh = 200, yl = 50, yh = 200;
int flag = 0;
float u1, v1, u2, v2;

// Code structure for window clipping (Top, Bottom, Right, Left)
struct Code {
    int t, b, r, l;
};

// Initialize OpenGL window settings
void init() {
    glClearColor(1, 1, 1, 0);  // White background
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(0, 0, 0);        // Black color for lines
}

// Get region code (t, b, r, l) for a point (u, v)
Code getCode(int u, int v) {
    Code c = {0, 0, 0, 0};

    if (u < xl) c.l = 1;
    if (u > xh) c.r = 1;
    if (v < yl) c.b = 1;
    if (v > yh) c.t = 1;

    return c;
}

// DDA Line drawing algorithm
void line(float u1, float v1, float u2, float v2) {
    float dx = u2 - u1, dy = v2 - v1;
    int steps = abs(dx) > abs(dy) ? abs(dx) : abs(dy);
    float xi = dx / steps, yi = dy / steps;

    glBegin(GL_POINTS);
    glVertex2f(u1, v1);

    for (int i = 0; i < steps; i++) {
        u1 += xi;
        v1 += yi;
        glVertex2f(u1, v1);
    }

    glEnd();
    glFlush();
}

// Draw the clipping window (rectangle)
void drawWindow() {
    line(50, 50, 200, 50);
    line(50, 50, 50, 200);
    line(200, 50, 200, 200);
    line(50, 200, 200, 200);
}

// Mouse click function to get points for line drawing
void myMouse(int button, int state, int x, int y) {
    glColor3f(0, 0, 0); // Set color to black
    if (state == GLUT_DOWN && flag == 0) {
        u1 = x;
        v1 = 480 - y;  // Flip y-coordinate to match OpenGL coordinates
        flag = 1;
    } else if (state == GLUT_DOWN && flag == 1) {
        u2 = x;
        v2 = 480 - y;
        flag = 2;
        line(u1, v1, u2, v2);
    }
}

// Cohen-Sutherland line clipping algorithm
void cohen() {
    Code c1 = getCode(u1, v1), c2 = getCode(u2, v2);
    float m = (v2 - v1) / (u2 - u1);
    int xi, yi, flag;

    while (true) {
        // If both points are inside the window, break
        if (c1.t == 0 && c2.t == 0 && c1.b == 0 && c2.b == 0 && c1.r == 0 && c2.r == 0 && c1.l == 0 && c2.l == 0) {
            break;
        }

        // If both points are outside the window, reject the line
        else if (((c1.t && c2.t) || (c1.b && c2.b) || (c1.r && c2.r) || (c1.l && c2.l)) != 0) {
            u1 = v1 = u2 = v2 = 0;
            break;
        }

        // Clip the line if partially inside the window
        else {
            if (c1.l == 1 || c2.l == 1) {
                xi = xl;
                yi = v1 + m * (xl - u1);
                flag = (c1.l == 1) ? 0 : 1;
            } else if (c1.r == 1 || c2.r == 1) {
                xi = xh;
                yi = v1 + m * (xh - u1);
                flag = (c1.r == 1) ? 0 : 1;
            } else if (c1.b == 1 || c2.b == 1) {
                xi = u1 + ((1 / m) * (yl - v1));
                yi = yl;
                flag = (c1.b == 1) ? 0 : 1;
            } else if (c1.t == 1 || c2.t == 1) {
                xi = u1 + ((1 / m) * (yh - v1));
                yi = yh;
                flag = (c1.t == 1) ? 0 : 1;
            }

            Code c = getCode(xi, yi);

            if (flag == 0) {
                u1 = xi;
                v1 = yi;
                c1 = c;
            } else {
                u2 = xi;
                v2 = yi;
                c2 = c;
            }
        }
    }

    // Draw the window and the clipped line
    drawWindow();
    line(u1, v1, u2, v2);
}

// Keyboard function for clipping and resetting the window
void myKey(unsigned char key, int x, int y) {
    if (key == 'c') {  // Clip the line
        init();
        cohen();
    }
    if (key == 'r') {  // Reset the window
        init();
        drawWindow();
        flag = 0;
    }
}

// Main function
int main(int argc, char **argv) {
    // Initialize GLUT
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE);
    glutInitWindowSize(640, 480);
    glutCreateWindow("Line Clipping");

    // Set up the orthographic projection
    gluOrtho2D(0, 640, 0, 480);

    // Initialize window
    init();
    glFlush();

    // Draw the clipping window
    drawWindow();

    // Set mouse and keyboard functions
    glutMouseFunc(myMouse);
    glutKeyboardFunc(myKey);

    // Start the GLUT event loop
    glutMainLoop();

    return 0;
}

8cg.cpp
Displaying 8cgg.cpp.
