
/*Implement the following polygon filling methods Flood fill / Seed fill using mouse
click, keyboard interface and menu driven programming
*/


#include <GL/glut.h>
#include <iostream>
#include <queue>
using namespace std;

int fillColor[3] = {1, 0, 0}; // Default Red color
int boundaryColor[3] = {0, 0, 0}; // Black color for boundaries

// Flood fill algorithm using a queue to avoid recursion limit
void floodFill(int x, int y, float* oldColor, float* newColor) {
    // Create a queue to hold the pixels to be processed
    queue<pair<int, int>> pixels;
    pixels.push(make_pair(x, y));

    while (!pixels.empty()) {
        // Get the next pixel to process
        pair<int, int> p = pixels.front();
        pixels.pop();

        int px = p.first;
        int py = p.second;

        // Read the color of the current pixel
        float pixel[3];
        glReadPixels(px, py, 1, 1, GL_RGB, GL_FLOAT, pixel);

        // Check if the pixel is the old color and not the boundary color
        if (pixel[0] == oldColor[0] && pixel[1] == oldColor[1] && pixel[2] == oldColor[2]) {
            // Set the color for the current pixel
            glColor3fv(newColor);
            glBegin(GL_POINTS);
            glVertex2i(px, py);
            glEnd();
            glFlush();

            // Push neighboring pixels into the queue for further processing
            pixels.push(make_pair(px + 1, py));
            pixels.push(make_pair(px - 1, py));
            pixels.push(make_pair(px, py + 1));
            pixels.push(make_pair(px, py - 1));
        }
    }
}

// Mouse click handler
void mouse(int button, int state, int x, int y) {
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
        float oldColor[3] = {1.0f, 1.0f, 1.0f}; // White background
        // Explicitly cast the values to float
        float newColor[3] = {static_cast<float>(fillColor[0]), 
                             static_cast<float>(fillColor[1]), 
                             static_cast<float>(fillColor[2])};
        floodFill(x, 480 - y, oldColor, newColor); // Adjust y as OpenGL's origin is bottom-left
    }
}

// Keyboard input handler
void keyboard(unsigned char key, int x, int y) {
    if (key == 'f' || key == 'F') {
        float oldColor[3] = {1.0f, 1.0f, 1.0f}; // White background
        // Explicitly cast the values to float
        float newColor[3] = {static_cast<float>(fillColor[0]), 
                             static_cast<float>(fillColor[1]), 
                             static_cast<float>(fillColor[2])};
        floodFill(320, 240, oldColor, newColor); // Fill from center
    }
}

// Menu callback function to change fill color
void menu(int option) {
    if (option == 1) {
        fillColor[0] = 1; fillColor[1] = 0; fillColor[2] = 0; // Red
    } else if (option == 2) {
        fillColor[0] = 0; fillColor[1] = 1; fillColor[2] = 0; // Green
    } else if (option == 3) {
        fillColor[0] = 0; fillColor[1] = 0; fillColor[2] = 1; // Blue
    }
}

// Function to draw a simple polygon
void drawPolygon() {
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(0, 0, 0); // Black border

    glBegin(GL_LINE_LOOP);
    glVertex2i(150, 150);
    glVertex2i(500, 150);
    glVertex2i(500, 400);
    glVertex2i(150, 400);
    glEnd();

    glFlush();
}

void init() {
    glClearColor(1, 1, 1, 1); // White background
    gluOrtho2D(0, 640, 0, 480);
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(640, 480);
    glutCreateWindow("Flood Fill - Mouse, Keyboard, Menu");
    init();
    glutDisplayFunc(drawPolygon);
    glutMouseFunc(mouse);
    glutKeyboardFunc(keyboard);

    // Create menu
    int menu_id = glutCreateMenu(menu);
    glutAddMenuEntry("Fill Red", 1);
    glutAddMenuEntry("Fill Green", 2);
    glutAddMenuEntry("Fill Blue", 3);
    glutAttachMenu(GLUT_RIGHT_BUTTON);

    glutMainLoop();
}
