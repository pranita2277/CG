/*
4 Implement Bresenham circle drawing algorithm to draw any object. The object
should be displayed in all the quadrants with respect to center and radius
*/

#include <GL/glut.h>
#include <iostream>
using namespace std;

int r;

void plotCirclePoints(int xc, int yc, int x, int y) {
    glBegin(GL_POINTS);
    glVertex2i(xc + x, yc + y);
    glVertex2i(xc - x, yc + y);
    glVertex2i(xc + x, yc - y);
    glVertex2i(xc - x, yc - y);
    glVertex2i(xc + y, yc + x);
    glVertex2i(xc - y, yc + x);
    glVertex2i(xc + y, yc - x);
    glVertex2i(xc - y, yc - x);
    glEnd();
}

void drawCircle(int xc, int yc, int r) {
    int x = 0, y = r;
    int d = 3 - 2 * r;
    while (x <= y) {
        plotCirclePoints(xc, yc, x, y);
        if (d < 0) {
            d += 4 * x + 6;
        } else {
            d += 4 * (x - y) + 10;
            y--;
        }
        x++;
    }
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(0, 0, 0);
    
    // Draw axes
    glBegin(GL_LINES);
    glVertex2i(-320, 0); glVertex2i(320, 0); // X-axis
    glVertex2i(0, -240); glVertex2i(0, 240); // Y-axis
    glEnd();
    
    glColor3f(1, 0, 0); // Red circles

    // Draw object (circle) in all four quadrants
    drawCircle(100, 100, r);
    drawCircle(-100, 100, r);
    drawCircle(-100, -100, r);
    drawCircle(100, -100, r);

    glFlush();
}

void init() {
    glClearColor(1, 1, 1, 0); // White background
    gluOrtho2D(-320, 320, -240, 240);
}

int main(int argc, char** argv) {
    cout << "Enter radius: ";
    cin >> r;

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(640, 480);
    glutCreateWindow("Bresenham Circle in All Quadrants");
    init();
    glutDisplayFunc(display);
    glutMainLoop();
}

